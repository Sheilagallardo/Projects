{
  "metadata": {
    "kernelspec": {
      "name": "node_nteract",
      "language": "javascript",
      "display_name": "Node.js (nteract)"
    },
    "kernel_info": {
      "name": "node_nteract"
    },
    "language_info": {
      "name": "javascript",
      "version": "8.2.1",
      "mimetype": "application/javascript",
      "file_extension": ".js"
    },
    "title": "WepSIM ",
    "nteract": {
      "version": "nteract-on-jupyter@2.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "## mode",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "ep",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "mode",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## firmware",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "\nlui reg1, U32 {     # BR[reg1] <-- U32\n\t\tco = 010010,   \n  \tnwords = 2,\n  \treg1 = reg(25,21),\n  \tU32 = inm(63,32),\n  \n  \t{\n     \t\t(T2, C0)      \t\t\t\t\t\t\t\t\t\t\t\t\t\t# Read the first address corresponding to the first part of the instruction \n     \t\t(T2, C0,TA, R, BW=11, M1, C1)     \t\t\t\t# We read the second part of the instruction from memory to obtain the number (U32)\n     \t\t(T1, SelC=10101,LC, M2, C2, A0, B, C=0) \t# BR[reg1]<-- U32, PC+4 and go to fetch to read next instruction\n\t\t}\n} \n\n\n\nsw reg1, (reg2) {    # Memory [reg2] <-- BR[reg1]\n\t\tco = 010000,\n\t\tnwords = 1,\n\t\treg1 = reg(25,21),\n\t\treg2 = reg(20,16),\n      \n  \t{\n\t\t\t\t(SelA=10000, T9, C0),     \t\t\t\t\t\t# MAR <-- Memory[reg2]\n    \t\t(SelB=10101, T10, C1),   \t\t\t\t\t\t\t# MBR <-- BR[reg1]\n    \t\t(TA, TD, W, BW=11, A0=1, B=1, C=0),   # Write into the memory with the address located at the MAR, the MBR content\n\t\t}                 \n}\n\n\n\nlw reg1, (reg2) {    # BR[reg1] <-- Memory [reg2]\n  \tco = 010011,\n  \tnwords= 1,\n  \treg1 = reg(25,21),\n  \treg2= reg(20,16),\n      \n  \t{\n    \t\t(SelA=10000,T9, C0)   \t\t\t\t\t\t# We take the address stored in reg2 and we deliver it to the MAR\n  \t\t\t(T2, C0, TA, R, BW=11, M1, C1)  \t# We take the content corresponding to this address and we deliver it to the MBR\n    \t\t(SelC=10101, LC, T1, A0,B,C=0)  \t# BR[reg1]<-- MBR\n\t\t}\n}\n\n\n\nadd reg1, reg2, reg3 {     # BR[reg1] <-- BR[reg2] + BR[reg3]\n\t\tco = 011000,\n    nwords = 1,\n  \treg1 = reg(25,21),\n    reg2 = reg(20,16),\n    reg3 = reg(15,11),\n  \t\n   {\n      \t(SelCop =1010, MC, SelP =11, M7, C7, T6, SelA = 01011, SelB = 10000, SelC= 10101, LC, A0, B, C=0)  \n  \t\t# We take the operands from RA and RB into the ALU. Then, the add operation is performed and the result is stored in RC.\n   } \n}\n\n\n\nmul_add reg1, reg2, reg3, reg4 {     # BR[reg1] <-- BR[reg] * BR[reg3] + BR[reg4]\n\t\tco = 011001,\n    nwords =1,\n    reg1 = reg(25,21),\n    reg2= reg(20,16),\n    reg3=reg(15,11),\n    reg4= reg(10,6),\n    \n   \t{\t\n    \t\t(SelCop= 1100, MC, SelA=10000, SelB=01011, T6, C5) \t\t\t# multiplication op, the result is stored in RT2\n        (SelCop =1010, MC, SelA = 00110, MB=1, SelC= 10101, LC, T6, SelP =11, M7, C7, A0, B, C=0) # add op, the result is stored in RC\n\t\t}\n}\n\n\n\nbeq reg1, reg2, S10 {         # If (BR[reg1] == BR[reg2]) then PC <-- PC + S10\n\t\tco = 110100,\n  \tnwords =1,\n \t\treg1= reg(25,21),\n  \treg2 = reg(20,16),\n  \tS10 = address(9,0)rel,\n    \n    {\n    \t\t(SelCop = 1011, MC, SelA=10101, SelB= 10000, SelP=11, M7, C7)  \t# Check If BR[reg1] - BR[reg2] == 0\n        (MADDR= backtofetch, C=0110, B)  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# Jump to \"backtofetch\" if Z==0 (if they are not equal)\n        (T2, C4)                                                        # BR[RT1] <-- PC\n  \t\t\t(SIZE = 01010, OFFSET=00000, SE=1, T3, C5) \t\t\t\t\t\t\t\t\t\t\t# BR[RT2] <-- S10\n  \t\t\t(SelCop=1010, MC, MA, MB, T6, C2, A0, B, C=0) \t\t\t\t\t\t\t\t\t# PC <-- BR[RT1] + BR[RT2]\n  \t\t\tbacktofetch:\n  \t\t\t\t\t(A0,B, C=0) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# Jumps to the fetch\n\t\t}\n}\n\n\n\njal U16 {       # BR[ra] <-- PC, PC <-- U16\n\t\tco = 100001,\n  \tnwords = 1,\n  \tU16 = inm(15,0),\n      \n  \t{\n    \t\t(SelC = 00001, MR, T2, LC) \t\t\t\t\t\t\t\t\t\t\t\t\t\t# RC = ra; RC <-- PC\n    \t\t(Size = 10000, Offset=00000, T3, C2, A0, B, C=0) \t\t\t# We take the 16-bit integer and we store it in the PC\n\t\t}\n}\n\n\n\njr_ra {        # PC <-- BR[ra]\n  \tco = 100010,\n \t\tnwords =1,\n      \n   \t{\n    \t\t(SelA = 00001, MR, T9, C2,A0, B, C=0)           # RA= ra; PC <--RA\n\t\t}\n}\n\n\n\nhalt {        # PC <-- 0x0000; SR <-- 0x0000\n  \tco = 100011,\n  \tnwords =1,\n      \n    {\t\n     \t (SelA = 00000, MR, T9, C7, C2, A0, B, C=0)     # RA = zero; PC <-- RA, SR <-- RA\n\t\t}\n}\n\n\n\nxchb (reg1), (reg2) { # Memory[reg1] <--> Memory[reg2] \n  co = 011010,\n  nwords = 1,\n  reg1 = reg(25,21),\n  reg2 = reg(20,16),\n    {\n    \t(SelA = 10101, T9, C0) # MAR <-- BR[reg1]\n      (T9, C0, TA, R, BW =00, C1, M1) # MBR <--Memory[reg1]\n      (T1, C4) # RT1 <-- MBR\n  \t\t(T10, C0, SelB= 10000) # MAR <-- BR[reg2]\n  \t\t(T10, C0, TA, R, BW= 00, C1, M1) # MBR <--Memory[reg2]\n  \t\t(T9, C0, SelA = 10101) # MAR <-- BR[reg1]\n  \t\t(T9, C0, TA, W, TD, BW =00) # Memory[reg1] <-- MBR\n  \t\t(T4, C1) # MBR <-- BR[RT1]\n  \t\t(T10, C0, SelB= 10000) # MAR <-- BR[reg2]\n  \t\t(T10, C0, TA, W, TD, BW =00, A0, B, C=0)  # Memory[reg2] <-- MBR\n  \n}\n}\n   ",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "firmware",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## assembly",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "\n\n\n\n\n\n\n\n\n\n",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "assembly",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## state_current",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "{\n  \"time\": 1670085553006,\n  \"title\": \"clock 1 @ &#181;address 0\",\n  \"title_short\": \"clock 1,<br>&#181;add 0\",\n  \"content\": \"register R2 = 0x100000; register PC = 0x8000; memory 0x1018 = 0x1000100; memory 0x101c = 0x1010100; memory 0x1020 = 0x1010100; memory 0x1024 = 0x1010100; memory 0x1028 = 0x1000100; memory 0x1030 = 0x1000100; memory 0x1034 = 0x1000100; memory 0x1038 = 0x1000100; memory 0x103c = 0x1000100; memory 0x1040 = 0x1000100; memory 0x1048 = 0x1010100; memory 0x104c = 0x1010100; memory 0x1050 = 0x1010100; memory 0x1054 = 0x1010100; memory 0x1058 = 0x1010100; memory 0x1060 = 0x1000100; memory 0x1064 = 0x1000100; memory 0x1068 = 0x100; memory 0x106c = 0x100; memory 0x1070 = 0x1000000; memory 0x1078 = 0x1000100; memory 0x107c = 0x1000100; memory 0x1080 = 0x100; memory 0x1084 = 0x100; memory 0x1088 = 0x1010100; memory 0x10c0 = 0x1000100; memory 0x10c4 = 0x1010100; memory 0x10c8 = 0x1010100; memory 0x10cc = 0x1010100; memory 0x10d8 = 0x1000100; memory 0x10dc = 0x100; memory 0x10e0 = 0x1000100; memory 0x10e4 = 0x1000100; memory 0x10f0 = 0x1010100; memory 0x10f4 = 0x1010100; memory 0x10f8 = 0x1010100; memory 0x10fc = 0x1000100; memory 0x1108 = 0x1000000; memory 0x110c = 0x100; memory 0x1110 = 0x1000100; memory 0x1114 = 0x10100; memory 0x1120 = 0x1010100; memory 0x1124 = 0x1010100; memory 0x1128 = 0x1000100; memory 0x112c = 0x1000100; memory 0x1168 = 0x1010100; memory 0x116c = 0x1010100; memory 0x1170 = 0x1010100; memory 0x1174 = 0x1010100; memory 0x1178 = 0x10000; memory 0x1180 = 0x1000000; memory 0x1184 = 0x1000100; memory 0x1188 = 0x1000000; memory 0x118c = 0x1000000; memory 0x1190 = 0x10000; memory 0x1198 = 0x1010100; memory 0x119c = 0x1000100; memory 0x11a0 = 0x1010100; memory 0x11a4 = 0x1010100; memory 0x11a8 = 0x10000; memory 0x11b0 = 0x100; memory 0x11b4 = 0x1000100; memory 0x11b8 = 0x100; memory 0x11bc = 0x100; memory 0x11c8 = 0x1010100; memory 0x11cc = 0x1010100; memory 0x11d0 = 0x1010100; memory 0x11d4 = 0x1010100; memory 0x11d8 = 0x10000; memory 0x8000 = 0x49400000; memory 0x8004 = 0x1000; memory 0x8008 = 0x5403108; memory 0x800c = 0x4bc00000; memory 0x8010 = 0x20; memory 0x8014 = 0x7c03104; memory 0x8018 = 0x48200000; memory 0x801c = 0x8028; memory 0x8020 = 0x88000000; memory 0x8024 = 0x8c000000; memory 0x8028 = 0x48a00000; memory 0x8030 = 0x48c00000; memory 0x8038 = 0x48e00000; memory 0x803c = 0x18; memory 0x8040 = 0x4bc00000; memory 0x8044 = 0x1; memory 0x8048 = 0xd0e50024; memory 0x804c = 0x67872980; memory 0x8050 = 0x639c5000; memory 0x8054 = 0x67a73140; memory 0x8058 = 0x63bd5000; memory 0x805c = 0x6b9d0000; memory 0x8060 = 0x60be2800; memory 0x8064 = 0x48200000; memory 0x8068 = 0x8048; memory 0x806c = 0x88000000; memory 0x8070 = 0xd0c7000c; memory 0x8074 = 0x60c6f000; memory 0x8078 = 0x60a60000; memory 0x807c = 0x88000000; memory 0x8080 = 0x49400000; memory 0x8084 = 0x1; memory 0x8088 = 0x4bc00000; memory 0x808c = 0x1000; memory 0x8090 = 0x7c03108; memory 0x8094 = 0x4bc00000; memory 0x8098 = 0x20; memory 0x809c = 0x7c03104; memory 0x80a0 = 0x4be00000; memory 0x80a4 = 0x24; memory 0x80a8 = 0x48200000; memory 0x80ac = 0x8000; memory 0x80b0 = 0x6021f800; memory 0x80b4 = 0x88000000; \"\n}",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "state_current",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## state_history",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "[]",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "state_history",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## record",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "[]",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "record",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## tag",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "12/3/2022, 5:38:23 PM",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "tag",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## notify",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "true",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "notify",
        "type": "boolean",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    }
  ]
}